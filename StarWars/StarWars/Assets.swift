//
//  StyleKitName.swift
//  StarWars
//
//  Created by Nicholas Yoon on 11/12/16.
//  Copyright Â© 2016 nyoon. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class Assets : NSObject {
	
	//// Drawing Methods
	
	public dynamic class func drawBack(frame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40)) {
		//// General Declarations
		let context = UIGraphicsGetCurrentContext()!
		
		//// Color Declarations
		let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
		
		//// Bezier Drawing
		context.saveGState()
		context.translateBy(x: frame.minX + 15, y: frame.minY + 12)
		context.scaleBy(x: 0.05, y: 0.05)
		
		let bezierPath = UIBezierPath()
		bezierPath.move(to: CGPoint(x: 192, y: 32.4))
		bezierPath.addLine(to: CGPoint(x: 159.7, y: 0))
		bezierPath.addLine(to: CGPoint(x: 0, y: 160))
		bezierPath.addLine(to: CGPoint(x: 0, y: 160))
		bezierPath.addLine(to: CGPoint(x: 0, y: 160))
		bezierPath.addLine(to: CGPoint(x: 159.7, y: 320))
		bezierPath.addLine(to: CGPoint(x: 192, y: 287.6))
		bezierPath.addLine(to: CGPoint(x: 64.7, y: 160))
		bezierPath.addLine(to: CGPoint(x: 192, y: 32.4))
		bezierPath.close()
		fillColor.setFill()
		bezierPath.fill()
		
		context.restoreGState()
	}
	
	//// Generated Images
	
	public dynamic class func imageOfBack(imageSize: CGSize = CGSize(width: 40, height: 40)) -> UIImage {
		UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
		Assets.drawBack(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height))
		
		let imageOfBack = UIGraphicsGetImageFromCurrentImageContext()!
		UIGraphicsEndImageContext()
		
		return imageOfBack
	}

	
	public dynamic class func drawShare(frame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40)) {
		//// Color Declarations
		let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
		
		//// miu
		//// Artboard-1
		//// slice
		
		
		//// shareImage Drawing
		let shareImagePath = UIBezierPath()
		shareImagePath.move(to: CGPoint(x: frame.minX + 12, y: frame.minY + 15))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 12, y: frame.minY + 31))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 28, y: frame.minY + 31))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 28, y: frame.minY + 15))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 23.5, y: frame.minY + 15))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 23.5, y: frame.minY + 16))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 27, y: frame.minY + 16))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 27, y: frame.minY + 30))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 13, y: frame.minY + 30))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 13, y: frame.minY + 16))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 16.5, y: frame.minY + 16))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 16.5, y: frame.minY + 15))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 12, y: frame.minY + 15))
		shareImagePath.close()
		shareImagePath.move(to: CGPoint(x: frame.minX + 16.46, y: frame.minY + 12.95))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 15.76, y: frame.minY + 12.25))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 20, y: frame.minY + 8))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 24.24, y: frame.minY + 12.25))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 23.54, y: frame.minY + 12.95))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 20.5, y: frame.minY + 9.92))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 20.5, y: frame.minY + 23))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 19.5, y: frame.minY + 23))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 19.5, y: frame.minY + 9.92))
		shareImagePath.addLine(to: CGPoint(x: frame.minX + 16.46, y: frame.minY + 12.95))
		shareImagePath.close()
		fillColor.setFill()
		shareImagePath.fill()
	}
	
	//// Generated Images
	
	public dynamic class func imageOfShare(imageSize: CGSize = CGSize(width: 40, height: 40)) -> UIImage {
		UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
		Assets.drawShare(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height))
		
		let imageOfShare = UIGraphicsGetImageFromCurrentImageContext()!
		UIGraphicsEndImageContext()
		
		return imageOfShare
	}

	
}
